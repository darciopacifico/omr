// This class was generated by the JAXRPC RI, do not edit.
// Contents subject to change without notice.

package com.msaf.validador.wsclient;

import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.literal.*;
import com.sun.xml.rpc.encoding.simpletype.*;
import com.sun.xml.rpc.encoding.soap.SOAPConstants;
import com.sun.xml.rpc.streaming.*;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;
import javax.xml.namespace.QName;
import java.util.List;
import java.util.ArrayList;

public class ConsultaClienteResponse_LiteralSerializer extends LiteralObjectSerializerBase implements Initializable {
    private static final QName ns1_return_QNAME = new QName("", "return");
    private static final QName ns3_Registro_TYPE_QNAME = new QName("http://webservices.validador.msaf.com/", "Registro");
    private CombinedSerializer ns3_Registro_TYPE_QNAME_Serializer;
    
    public ConsultaClienteResponse_LiteralSerializer(QName type, String encodingStyle) {
        super(type, true, encodingStyle);
    }
    
    public void initialize(InternalTypeMappingRegistry registry) throws Exception {
        ns3_Registro_TYPE_QNAME_Serializer = (CombinedSerializer)registry.getSerializer("", javax.xml.soap.SOAPElement.class, ns3_Registro_TYPE_QNAME);
    }
    
    public Object doDeserialize(XMLReader reader,
        SOAPDeserializationContext context) throws Exception {
        com.msaf.validador.wsclient.ConsultaClienteResponse instance = new com.msaf.validador.wsclient.ConsultaClienteResponse();
        Object member;
        QName elementName;
        List values;
        Object value;
        
        reader.nextElementContent();
        elementName = reader.getName();
        if ((reader.getState() == XMLReader.START) && (elementName.equals(ns1_return_QNAME))) {
            values = new ArrayList();
            for(;;) {
                if ((reader.getState() == XMLReader.START) && (elementName.equals(ns1_return_QNAME))) {
                    value = ns3_Registro_TYPE_QNAME_Serializer.deserialize(ns1_return_QNAME, reader, context);
                    if (value == null) {
                        throw new DeserializationException("literal.unexpectedNull");
                    }
                    values.add(value);
                    reader.nextElementContent();
                } else {
                    break;
                }
            }
            member = new javax.xml.soap.SOAPElement[values.size()];
            member = values.toArray((Object[]) member);
            instance.set_return((javax.xml.soap.SOAPElement[])member);
        }
        
        XMLReaderUtil.verifyReaderState(reader, XMLReader.END);
        return (Object)instance;
    }
    
    public void doSerializeAttributes(Object obj, XMLWriter writer, SOAPSerializationContext context) throws Exception {
        com.msaf.validador.wsclient.ConsultaClienteResponse instance = (com.msaf.validador.wsclient.ConsultaClienteResponse)obj;
        
    }
    public void doSerialize(Object obj, XMLWriter writer, SOAPSerializationContext context) throws Exception {
        com.msaf.validador.wsclient.ConsultaClienteResponse instance = (com.msaf.validador.wsclient.ConsultaClienteResponse)obj;
        
        if (instance.get_return() != null) {
            for (int i = 0; i < instance.get_return().length; ++i) {
                ns3_Registro_TYPE_QNAME_Serializer.serialize(instance.get_return()[i], ns1_return_QNAME, null, writer, context);
            }
        }
    }
}
