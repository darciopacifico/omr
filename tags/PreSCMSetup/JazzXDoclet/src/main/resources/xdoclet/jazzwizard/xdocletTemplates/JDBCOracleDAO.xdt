/**
 * Gerado por XDoclet, nao edite!!
 **/
package <XDtPackage:packageName/>;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import br.com.dlp.framework.dao.DAOException;
import br.com.dlp.framework.dao.QueryOrder;
import br.com.dlp.framework.exception.BaseTechnicalError;
import br.com.dlp.framework.vo.ICadastroBaseVO;
import br.com.dlp.framework.vo.IPK;

import java.util.ArrayList;
import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.criterion.Expression;
import org.hibernate.expression.MatchMode;
import br.com.dlp.framework.dao.DAOException;
import br.com.dlp.framework.dao.QueryOrder;
import br.com.dlp.framework.exception.BaseTechnicalError;
import br.com.dlp.framework.servicelocator.ServiceLocatorException;
import br.com.dlp.framework.util.FrameworkAcheUtil;
import br.com.dlp.framework.vo.ICadastroBaseVO;
import br.com.dlp.framework.vo.IPK;


/**
<XDtMerge:merge file='xdoclet/jazzwizard/mergeDir/ComentarioGeralClasse.txt'></XDtMerge:merge>
 *
 * Implementaaao de <XDtWj2eeClass:daoClassName/> para JDBC Oracle
 *
 **/
<XDtClass:modifiers/> class <XDtWj2eeClass:JDBCOracleDAOClassName/> 
	extends <XDtWj2eeClass:extendedJDBCOracleDAOClassName /> 
	implements <XDtWj2eeClass:daoClassName/>{


<XDtWj2eeClass:ifIsSobrescreverMecanismoDePesquisa>
	/**
	 * Implementacao de <XDtWj2eeClass:metodoMecanismoPesquisa/> para JDBC Oracle
	 */
	public List <XDtWj2eeClass:metodoMecanismoPesquisa/>(
	<XDtWj2eeMethod:forAllMethods sort="true" >
		<XDtMethod:ifIsGetter>
			<XDtWj2eeMethod:ifIsPropriedadePesquisavel>
				<XDtWj2eeMethod:ifIsNotPrimeiroItemIteracao>,</XDtWj2eeMethod:ifIsNotPrimeiroItemIteracao><XDtWj2eeMethod:tipoAtributoParaPesquisa/> <XDtWj2eeMethod:nomeAtributoParaPesquisa/>
			</XDtWj2eeMethod:ifIsPropriedadePesquisavel>
		</XDtMethod:ifIsGetter>
	</XDtWj2eeMethod:forAllMethods>,
		QueryOrder[] queryOrders	
		) throws DAOException, BaseTechnicalError{
		
		
		StringBuffer sbQuery = new StringBuffer();
    List list;
    if(logger.isDebugEnabled()){
	    logger.debug("Montando a query...");
    }
    /*TODO: ESCREVA AQUI A QUERY DESTA PESQUISA CONTEMPLANDO: 
     * - CAMPOS RETORNADOS 
     * - TABELAS ENVOLVIDAS 
     * - CLAUSULA INNER JOINS (SE NECESSaRIO)
     * - CLAUSULA WHERE (SE NECESSaRIO)
     * - CLAUSULA ORDER BY (SE NECESSaRIO)
     * - CLAUSULA GROUP BY (SE NECESSaRIO)
     * */ 
    sbQuery.append("");
    
    Connection connection = getConnection();
    PreparedStatement preparedStatement=null;
    ResultSet resultSet=null;
    String query = new String(sbQuery);
    try {
	  if(logger.isDebugEnabled()){
	      logger.debug("Criando PreparedStatement...");
	  }
      preparedStatement = connection.prepareStatement(query);
      
	    //preparedStatement.setLong(0, clienteVO.getId());
	    //preparedStatement.setString(1, clienteVO.getNome());
      
      //TODO: CONTEMPLAR AS DECISaES DE ORDENAaaO
      if(logger.isDebugEnabled()){
	      logger.debug("Executando query...");
      }
      resultSet = preparedStatement.executeQuery();
      if(logger.isDebugEnabled()){
	      logger.debug("Populando Colecao de VOs para retorno...");
      }
      
      list = getCadastroBaseVOs(resultSet);
      
    } catch (SQLException e) {
      throw new DAOException("Nao foi possivel executar a query:"+query,e);
    }finally{
      closeConnection(connection, preparedStatement, resultSet);
    }
    if(logger.isDebugEnabled()){
	    logger.debug("...find executado com sucesso!");
    }

    return list;
		

	}
	
	/**
	 * Implementacao de <XDtWj2eeClass:metodoMecanismoPesquisa/> para JDBC Oracle
	 */
	public List <XDtWj2eeClass:metodoMecanismoPesquisa/>(
	<XDtWj2eeMethod:forAllMethods sort="true" >
		<XDtMethod:ifIsGetter>
			<XDtWj2eeMethod:ifIsPropriedadePesquisavel>
				<XDtWj2eeMethod:ifIsNotPrimeiroItemIteracao>,</XDtWj2eeMethod:ifIsNotPrimeiroItemIteracao><XDtWj2eeMethod:tipoAtributoParaPesquisa/> <XDtWj2eeMethod:nomeAtributoParaPesquisa/>
			</XDtWj2eeMethod:ifIsPropriedadePesquisavel>
		</XDtMethod:ifIsGetter>
	</XDtWj2eeMethod:forAllMethods>
		) throws DAOException, BaseTechnicalError{
		
		StringBuffer sbQuery = new StringBuffer();
    List list;
    logger.debug("Montando a query...");
    /*TODO: ESCREVA AQUI A QUERY DESTA PESQUISA CONTEMPLANDO: 
     * - CAMPOS RETORNADOS 
     * - TABELAS ENVOLVIDAS 
     * - CLAUSULA INNER JOINS (SE NECESSaRIO)
     * - CLAUSULA WHERE (SE NECESSaRIO)
     * - CLAUSULA ORDER BY (SE NECESSaRIO)
     * - CLAUSULA GROUP BY (SE NECESSaRIO)
     * */ 
    sbQuery.append("");
    
    Connection connection = getConnection();
    PreparedStatement preparedStatement=null;
    ResultSet resultSet=null;
    String query = new String(sbQuery);
    try {
      if(logger.isDebugEnabled()){
	      logger.debug("Criando PreparedStatement...");
      }
    
      preparedStatement = connection.prepareStatement(query);
      
	    //preparedStatement.setLong(0, clienteVO.getId());
	    //preparedStatement.setString(1, clienteVO.getNome());

      logger.debug("Executando query...");
      resultSet = preparedStatement.executeQuery();
      if(logger.isDebugEnabled()){
	      logger.debug("Populando Colecao de VOs para retorno...");
      }
      
      list = getCadastroBaseVOs(resultSet);
      
    } catch (SQLException e) {
      throw new DAOException("Nao foi possivel executar a query:"+query,e);
    }finally{
      closeConnection(connection, preparedStatement, resultSet);
    }

    logger.debug("...find executado com sucesso!");
    return list;
		
	}	
</XDtWj2eeClass:ifIsSobrescreverMecanismoDePesquisa>	

<XDtClass:ifIsClassNotAbstract>	
	/* (non-Javadoc)
	 * @see br.com.dlp.framework.dao.IDAO#findAll()
	 */
	public List findAll() throws DAOException, BaseTechnicalError {
		
		
		StringBuffer sbQuery = new StringBuffer();
    List list;
    if(logger.isDebugEnabled()){
	    logger.debug("Montando a query...");
    }
    
    /*TODO: ESCREVA AQUI A QUERY DESTA PESQUISA CONTEMPLANDO: 
     * - CAMPOS RETORNADOS 
     * - TABELAS ENVOLVIDAS 
     * - CLAUSULA INNER JOINS (SE NECESSaRIO)
     * - CLAUSULA WHERE (SE NECESSaRIO)
     * - CLAUSULA ORDER BY (SE NECESSaRIO)
     * - CLAUSULA GROUP BY (SE NECESSaRIO)
     * */ 
    sbQuery.append("");
    
    Connection connection = getConnection();
    PreparedStatement preparedStatement=null;
    ResultSet resultSet=null;
    String query = new String(sbQuery);
    try {
      logger.debug("Criando PreparedStatement...");
      preparedStatement = connection.prepareStatement(query);
      if(logger.isDebugEnabled()){
	      logger.debug("Executando query...");
      }
      resultSet = preparedStatement.executeQuery();
      
      logger.debug("Populando Colecao de VOs para retorno...");
      list = getCadastroBaseVOs(resultSet);
      
    } catch (SQLException e) {
      throw new DAOException("Nao foi possivel executar a query:"+query,e);
    }finally{
      closeConnection(connection, preparedStatement, resultSet);
    }
	if(logger.isDebugEnabled()){
    	logger.debug("...find executado com sucesso!");
	}

    return list;

	}
	/* (non-Javadoc)
	 * @see br.com.dlp.framework.dao.IDAO#findAll(br.com.dlp.framework.dao.QueryOrder[])
	 */
	public List findAll(QueryOrder[] queryOrders) throws DAOException,	BaseTechnicalError {
		StringBuffer sbQuery = new StringBuffer();
    List list;
    logger.debug("Montando a query...");
    /*TODO: ESCREVA AQUI A QUERY DESTA PESQUISA CONTEMPLANDO: 
     * - CAMPOS RETORNADOS 
     * - TABELAS ENVOLVIDAS 
     * - CLAUSULA INNER JOINS (SE NECESSaRIO)
     * - CLAUSULA WHERE (SE NECESSaRIO)
     * - CLAUSULA ORDER BY (SE NECESSaRIO)
     * - CLAUSULA GROUP BY (SE NECESSaRIO)
     * */ 
    sbQuery.append("");
    
    Connection connection = getConnection();
    PreparedStatement preparedStatement=null;
    ResultSet resultSet=null;
    String query = new String(sbQuery);
    try {
      if(logger.isDebugEnabled()){
	      logger.debug("Criando PreparedStatement...");
      }
      preparedStatement = connection.prepareStatement(query);
      
      //TODO: CONTEMPLAR AS DECISaES DE ORDENAaaO
      
      logger.debug("Executando query...");
      resultSet = preparedStatement.executeQuery();
    
      if(logger.isDebugEnabled()){
	      logger.debug("Populando Colecao de VOs para retorno...");
      }
      
      list = getCadastroBaseVOs(resultSet);
      
    } catch (SQLException e) {
      throw new DAOException("Nao foi possivel executar a query:"+query,e);
    } finally{
      closeConnection(connection, preparedStatement, resultSet);
    }

    logger.debug("...find executado com sucesso!");
    return list;
	}

	/**
	 * Implementaaao de IDAO.inserir() para JDBC Oracle
	 */
	public ICadastroBaseVO inserir(ICadastroBaseVO baseVO) throws DAOException,BaseTechnicalError {

    Connection connection = getConnection();
    
    if(logger.isDebugEnabled()){
	    logger.debug("Iniciando inclusao de <XDtWj2eeClass:voClassName/>!");
    }

    //TODO: Escreva aqui seu Statement de inseraao...
    StringBuffer insertQuery = new StringBuffer("insert into <XDtWj2eeClass:voClassName/> (id, nome, ....) values (?,?, ...)");
    PreparedStatement preparedStatement = null;

    try {
      preparedStatement = connection.prepareStatement(new String(insertQuery));

      //preparedStatement.setLong(0, moduleVO.getId());
      //preparedStatement.setString(1, moduleVO.getNome());

      int registrosAfetados = preparedStatement.executeUpdate();

      logger.debug("Inclusao efetuada (" + registrosAfetados + " registros)!");

    } catch (SQLException e) {
      throw new DAOException("Erro ao tentar incluir o VO " + baseVO, e);

    } finally {
      closeConnection(connection, preparedStatement);
    }

    /* invoca atualizacao do VO */
    baseVO = updateVO(baseVO);

    return baseVO;

	}


	/** 
	 * Implementaaao de IDAO.atualizar() para JDBC Oracle
	 */
	public ICadastroBaseVO atualizar(ICadastroBaseVO baseVO) throws DAOException, BaseTechnicalError {

    Connection connection = getConnection();
    
    if(logger.isDebugEnabled()){
	    logger.debug("Iniciando atualizaaao de <XDtWj2eeClass:voClassName/>!");
    }

    //TODO: Escreva aqui seu Statement de atualizacao...
    StringBuffer updateQuery = new StringBuffer("update <XDtWj2eeClass:voClassName/> set nome=?,... where id=?");
    PreparedStatement preparedStatement = null;

    try {
      preparedStatement = connection.prepareStatement(new String(updateQuery));

      //preparedStatement.setString(0, moduleVO.getNome());
      //preparedStatement.setLong(1, moduleVO.getId());

      int registrosAfetados = preparedStatement.executeUpdate();

      logger.debug("Atualizacao efetuada (" + registrosAfetados + " registros)!");

    } catch (SQLException e) {
      throw new DAOException("Erro ao tentar atualizar o VO " + baseVO, e);

    } finally {
      closeConnection(connection, preparedStatement);
    }

    /* invoca atualizacao do VO */
    baseVO = updateVO(baseVO);

    return baseVO;

	}


	/**
	 * Implementacao de IDAO.excluir() para JDBC Oracle
	 */
	public void excluir(ICadastroBaseVO baseVO) throws DAOException, BaseTechnicalError {


    Connection connection = getConnection();

	if(logger.isDebugEnabled()){
	    logger.debug("Iniciando exclusao de <XDtWj2eeClass:voClassName/>!");
	}

    //TODO: Escreva aqui seu Statement de atualizacao...
    StringBuffer deleteQuery = new StringBuffer("delete from <XDtWj2eeClass:voClassName/> where id=?");
    PreparedStatement preparedStatement = null;

    try {
      preparedStatement = connection.prepareStatement(new String(deleteQuery));
      
      //preparedStatement.setLong(), moduleVO.getId());

      int registrosAfetados = preparedStatement.executeUpdate();

      logger.debug("Exclusao efetuada (" + registrosAfetados + " registros)!");

    } catch (SQLException e) {
      throw new DAOException("Erro ao tentar deletar o VO " + baseVO, e);

    } finally {
      closeConnection(connection, preparedStatement);
    }
	}
	
	/**
	 * Abstracao da classe do VO deste DAO
	 **/
	protected Class getMappedClass(){
		return <XDtClass:className/>.class;
	}

  public ICadastroBaseVO findByPrimaryKey(IPK chave) throws DAOException, BaseTechnicalError {
    //return (ICadastroBaseVO) findById((Long)chave);
    throw new BaseTechnicalError("Este matodo ainda precisa ser implementado!");
  }


</XDtClass:ifIsClassNotAbstract>
	
	/**
	 * Recupera o VO preenchido pela camada de abstraaao 
	 * superior e popula a com sua parte dos campos.
	 */
  protected ICadastroBaseVO getCadastroBaseVO(ResultSet rs) throws DAOException {
    <XDtClass:className/> <XDtWj2eeMethod:denifirVariavelParaTipo tipo="<XDtClass:className/>"/> = (<XDtClass:className/>) super.getCadastroBaseVO(rs);
    
    /*popule o objeto <XDtWj2eeMethod:denifirVariavelParaTipo tipo="<XDtClass:className/>"/> com os dados do ResultSet rs */
    
    return <XDtWj2eeMethod:denifirVariavelParaTipo tipo="<XDtClass:className/>"/>;
  }
  
  	<XDtMethod:forAllMethods superclasses="false" >
		<XDtWj2eeMethod:ifIsPropriedadeTratavelTipoVO>
			<XDtMethod:ifIsGetter>
				<XDtWj2eeMethod:ifIsCriarMecanismoDeFindUmParaMuitos recursivamente="true">
				/*Implementaaao de find para recuperar todos os registros de <XDtMethod:methodName/>*/
				public List findAll<XDtWj2eeMethod:primeiraLetraMaiuscula nome="<XDtWj2eeMethod:propertyNameSemSufixoVO/>"/>() throws DAOException, BaseTechnicalError{
					
					StringBuffer sbQuery = new StringBuffer();
			    List list;
			    if(logger.isDebugEnabled()){
				    logger.debug("Montando a query...");
			    }
			    
			    /*TODO: ESCREVA AQUI A QUERY DESTA PESQUISA CONTEMPLANDO: 
			     * - CAMPOS RETORNADOS 
			     * - TABELAS ENVOLVIDAS 
			     * - CLAUSULA INNER JOINS (SE NECESSaRIO)
			     * - CLAUSULA WHERE (SE NECESSaRIO)
			     * - CLAUSULA ORDER BY (SE NECESSaRIO)
			     * - CLAUSULA GROUP BY (SE NECESSaRIO)
			     * */ 
			    sbQuery.append("");
			    
			    Connection connection = getConnection();
			    PreparedStatement preparedStatement=null;
			    ResultSet resultSet=null;
			    String query = new String(sbQuery);
			    try {
			      logger.debug("Criando PreparedStatement...");
			      preparedStatement = connection.prepareStatement(query);
			      if(logger.isDebugEnabled()){
				      logger.debug("Executando query...");
			      }
			      resultSet = preparedStatement.executeQuery();
			      
			      logger.debug("Populando Colecao de VOs para retorno...");
			      list = getCadastroBaseVOs(resultSet);
			      
			    } catch (SQLException e) {
			      throw new DAOException("Nao foi possivel executar a query:"+query,e);
			    }finally{
			      closeConnection(connection, preparedStatement, resultSet);
			    }
					if(logger.isDebugEnabled()){
				    	logger.debug("...find executado com sucesso!");
					}
			
			    return list;


				}
				</XDtWj2eeMethod:ifIsCriarMecanismoDeFindUmParaMuitos>
			</XDtMethod:ifIsGetter>
		</XDtWj2eeMethod:ifIsPropriedadeTratavelTipoVO>
	</XDtMethod:forAllMethods>
  
}

